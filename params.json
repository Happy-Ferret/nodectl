{"name":"nodectl","tagline":"supervisor script for node.js","body":"# nodectl\r\n\r\nsupervisor sctipt for nodejs.\r\n\r\n## 日本語による解説\r\n\r\n### 一番の目玉\r\n* アプリケーションに関係ないレベルでの作業が不要\r\n* httpを一本立てるだけでよい\r\n* デーモン化やクラスタリングで頭を悩ませなくてよい\r\n\r\n### 有している作戦能力\r\n* CPUのスレッド数に応じて自動的にfork、応答性能を向上\r\n* コードに変更を施したらメインプロセスを維持したまま子プロセスのみを自動的にリロード、変更を浸透\r\n* 浸透のディレイタイムを設定可能\r\n* 単独でのデーモン化能力\r\n* ログのファイル出力機能\r\n* `console`出力の自動色分け出力機能\r\n* `start-stop-daemon`のような命令系統\r\n* 最近傍の`package.json`を探索、`name`, `version`, `main`と言った情報を取得\r\n* 最近傍の`package.json`からキー名を探索、ロングオプションと同値のキーをデフォルト値としてロード\r\n* `package.json`と同一ディレクトリにある`.nodectl.json`の値を読み、設定値をロード\r\n* オプションで渡した値が最優先され、次に`.nodectl.json`、次に`package.json`、次にデフォルト値、という順番で評価\r\n* `PORT`や`NODE_ENV`などの環境変数値を`undefined`のまま実行しない\r\n* 現在の引数でどのような動作が期待されるかテストするモード\r\n* crontabのように動作するスクリプトなど、単一のインスタンスのみで実行されることを期待するスクリプトの指定\r\n\r\n## Features\r\n\r\n* watch code changes\r\n* cluster\r\n* daemonize\r\n* colorize console\r\n* env setter\r\n\r\n## Install\r\n\r\n`npm install -g nodectl`\r\n\r\n## How to use\r\n\r\n```\r\ncd $HOME\r\nexpress test\r\ncd test\r\nnpm install\r\nnodectl start app.js\r\n```\r\n\r\n### watch\r\n```\r\nnodectl -w app.js\r\n```\r\n### daemonise\r\n```\r\nnodectl -d app.js\r\n```\r\n### both\r\n```\r\nnodectl -d -w app.js\r\n```\r\n### clock works (ex. crontab like action)\r\n```\r\nnodectl -x clock.js\r\n```\r\n### stop daemon\r\n```\r\ncd ~/test\r\nnodectl stop\r\n```\r\n### daemonize and..\r\n```\r\ncd ~/test\r\nnodectl start -d app.js\r\nnodectl reload\r\nnodectl restart\r\nnodectl status\r\n  application running.\r\n```\r\n\r\n## Usage\r\n\r\n`nodectl [action] [options] <program>`\r\n\r\n### Action\r\n\r\n#### start\r\nexecute program (default action)\r\n#### stop\r\nstop daemonized program\r\n#### restart\r\nrestart program with daemonize mode\r\n#### force-clear\r\nforce clear pid\r\n#### reload\r\nrelease edited javascript (restart only child processes)\r\n#### status\r\ncheck program running or not\r\n\r\n### Options:\r\n#### -p, --port [NUMBER]\r\ndefault 3000, pass listening port (`process.env.PORT`)\r\n#### -e, --env [STRING]\r\ndefault development, pass environment (`process.env.NODE_ENV`)\r\n#### -c, --cluster [NUMBER]\r\ndefault number of cpu threads, concurrent process with cluster module\r\n#### -P, --pidpath [STRING]\r\ndirectory for pid files\r\n#### -l, --logpath [STRING]\r\ndirectory for log files\r\n#### -D, --delay [NUMBER]\r\ndefault 250, delay time for re-fork child workers\r\n#### -x, --execmaster [STRING]\r\nexecute script on master process (single instance)\r\n#### -n, --nocolor\r\nstop colorize console\r\n#### -d, --daemon\r\ndaemonize process\r\n#### -w, --watch\r\nwatch code changes, auto reload programs\r\n#### -t, --test\r\ncheck options (not execute)\r\n#### -v, --version\r\nshow version and exit\r\n#### -h, --help\r\nshow help message and exit\r\n\r\n## Defaults\r\n  * Default option values from\r\n    * `${PROJECT_ROOT}/.nodectl.json`\r\n    * `${PROJECT_ROOT}/package.json`\r\n  * Main script key is `main`\r\n\r\n## package.json search\r\n  nodectl automatically search nearest `package.json` form parent directories.\r\n\r\n  * application name from `package.json: name`\r\n  * application version from `package.json: version`\r\n  * application main script from `package.json: main` or `.nodectl.json: main`\r\n\r\n## Tips\r\n\r\n### automatically setting\r\n\r\n```sh\r\n$ cd $PROJECT_ROOT\r\n$ cat .nodectl.json\r\n{\r\n  \"main\": \"app.coffee\",\r\n  \"env\": \"development\",\r\n  \"execmaster\": \"config/clock.coffee\",\r\n  \"cluster\": \"1\",\r\n  \"watch\": true,\r\n  \"daemonize\": false\r\n}\r\n```\r\n\r\n### prevent master process down from execmaster\r\n\r\n```coffee\r\n$ cd $PROJECT_ROOT\r\n$ cat config/clock.coffee\r\n\r\nfs= require 'fs'\r\npath = require 'path'\r\nasync = require 'async'\r\n{spawn} = require 'child_process'\r\n\r\nif 'nodectl' is path.basename process.argv[1]\r\n\r\n  # Manager - spawn myself\r\n\r\n  setInterval ->\r\n    args = [path.join process.cwd(), 'config/clock.coffee']\r\n    spawn './node_modules/coffee-script/bin/coffee', args,\r\n      stdio: 'inherit'\r\n      env: process.env\r\n      cwd: process.cwd()\r\n      detached: yes\r\n  , 1000\r\n\r\nelse\r\n\r\n  # Worker - spawned process section\r\n\r\n  app = require './app.coffee'\r\n  {File} = app.get 'models'\r\n\r\n  root_dir = '/media'\r\n\r\n  fs.readdir root_dir, (err, list) ->\r\n    async.map list, (name, next) ->\r\n      filepath = path.join root_dir, name\r\n      File.find path: filepath, {}, {}, (err, file) ->\r\n        stat = fs.statSync filepath\r\n        unless file\r\n          file = new File()\r\n        if (String file.mtime) isnt (String stat.mtime)\r\n           file.path = filepath\r\n          file.stat = stat\r\n        file.save next\r\n    , (err) ->\r\n      if err\r\n        console.error err \r\n        process.exit 1\r\n      process.exit 0\r\n```\r\n\r\n## release\r\n\r\n```sh\r\n$ cd $PROJECT_ROOT\r\n$ cat .nodectl.json\r\n{\r\n  \"main\": \"app.coffee\",\r\n  \"env\": \"production\",\r\n  \"execmaster\": \"config/clock.coffee\",\r\n  \"daemonize\": true\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}